
Lab4_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eac  08002eac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eac  08002eac  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eac  08002eac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000001c  08002ed0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002ed0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009724  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc3  00000000  00000000  00029769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce8  00000000  00000000  0002c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf17  00000000  00000000  00043540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082581  00000000  00000000  0004f457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d19d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d1a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e70 	.word	0x08002e70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002e70 	.word	0x08002e70

0800014c <init_buffer>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonHold[NO_OF_BUTTONS];
//-------------------(đọc nút nhấn và chống nhiễu)------------------


void init_buffer() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e02a      	b.n	80001ae <init_buffer+0x62>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000158:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <init_buffer+0x74>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = BUTTON_IS_RELEASED;
 8000162:	4a18      	ldr	r2, [pc, #96]	; (80001c4 <init_buffer+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = BUTTON_IS_RELEASED;
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <init_buffer+0x7c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer3[i] = BUTTON_IS_RELEASED;
 8000176:	4a15      	ldr	r2, [pc, #84]	; (80001cc <init_buffer+0x80>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4413      	add	r3, r2
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000180:	4a13      	ldr	r2, [pc, #76]	; (80001d0 <init_buffer+0x84>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
		flagForButtonHold[i] = 0;
 800018a:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <init_buffer+0x88>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000194:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <init_buffer+0x8c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 800019e:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <init_buffer+0x90>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2100      	movs	r1, #0
 80001a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	ddd1      	ble.n	8000158 <init_buffer+0xc>
	}
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000038 	.word	0x20000038
 80001c4:	2000003c 	.word	0x2000003c
 80001c8:	20000040 	.word	0x20000040
 80001cc:	20000044 	.word	0x20000044
 80001d0:	20000048 	.word	0x20000048
 80001d4:	2000004c 	.word	0x2000004c
 80001d8:	20000050 	.word	0x20000050
 80001dc:	20000058 	.word	0x20000058

080001e0 <button_reading>:

void button_reading(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	e092      	b.n	8000312 <button_reading+0x132>
		debounceButtonBufer3[i] = debounceButtonBufer2[i];
 80001ec:	4a4d      	ldr	r2, [pc, #308]	; (8000324 <button_reading+0x144>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4413      	add	r3, r2
 80001f2:	7819      	ldrb	r1, [r3, #0]
 80001f4:	4a4c      	ldr	r2, [pc, #304]	; (8000328 <button_reading+0x148>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	460a      	mov	r2, r1
 80001fc:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = debounceButtonBufer1[i];
 80001fe:	4a4b      	ldr	r2, [pc, #300]	; (800032c <button_reading+0x14c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	7819      	ldrb	r1, [r3, #0]
 8000206:	4a47      	ldr	r2, [pc, #284]	; (8000324 <button_reading+0x144>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, (1U << i));
 8000210:	2201      	movs	r2, #1
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	fa02 f303 	lsl.w	r3, r2, r3
 8000218:	b29b      	uxth	r3, r3
 800021a:	4619      	mov	r1, r3
 800021c:	4844      	ldr	r0, [pc, #272]	; (8000330 <button_reading+0x150>)
 800021e:	f001 fdfb 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	4619      	mov	r1, r3
 8000226:	4a41      	ldr	r2, [pc, #260]	; (800032c <button_reading+0x14c>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBufer1[i] == debounceButtonBufer2[i] && debounceButtonBufer3[i] == debounceButtonBufer2[i])
 8000230:	4a3e      	ldr	r2, [pc, #248]	; (800032c <button_reading+0x14c>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	493a      	ldr	r1, [pc, #232]	; (8000324 <button_reading+0x144>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	440b      	add	r3, r1
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	d112      	bne.n	800026a <button_reading+0x8a>
 8000244:	4a38      	ldr	r2, [pc, #224]	; (8000328 <button_reading+0x148>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4935      	ldr	r1, [pc, #212]	; (8000324 <button_reading+0x144>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	440b      	add	r3, r1
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	429a      	cmp	r2, r3
 8000256:	d108      	bne.n	800026a <button_reading+0x8a>
			buttonBuffer[i] = debounceButtonBufer1[i];
 8000258:	4a34      	ldr	r2, [pc, #208]	; (800032c <button_reading+0x14c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	7819      	ldrb	r1, [r3, #0]
 8000260:	4a34      	ldr	r2, [pc, #208]	; (8000334 <button_reading+0x154>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	460a      	mov	r2, r1
 8000268:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <button_reading+0x154>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d136      	bne.n	80002e4 <button_reading+0x104>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000276:	4a30      	ldr	r2, [pc, #192]	; (8000338 <button_reading+0x158>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	2bc7      	cmp	r3, #199	; 0xc7
 8000280:	d80a      	bhi.n	8000298 <button_reading+0xb8>
				counterForButtonPress1s[i]++;
 8000282:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <button_reading+0x158>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028a:	3301      	adds	r3, #1
 800028c:	b299      	uxth	r1, r3
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <button_reading+0x158>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000296:	e039      	b.n	800030c <button_reading+0x12c>
			}
			else {
				flagForButtonPress1s[i] = 1;
 8000298:	4a28      	ldr	r2, [pc, #160]	; (800033c <button_reading+0x15c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
				//TO DO
				if (counterForButtonHold[i] < DURATION_FOR_HOLD) {
 80002a2:	4a27      	ldr	r2, [pc, #156]	; (8000340 <button_reading+0x160>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002aa:	2b31      	cmp	r3, #49	; 0x31
 80002ac:	d82e      	bhi.n	800030c <button_reading+0x12c>
					counterForButtonHold[i]++;
 80002ae:	4a24      	ldr	r2, [pc, #144]	; (8000340 <button_reading+0x160>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b6:	3301      	adds	r3, #1
 80002b8:	b299      	uxth	r1, r3
 80002ba:	4a21      	ldr	r2, [pc, #132]	; (8000340 <button_reading+0x160>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (counterForButtonHold[i] >= DURATION_FOR_HOLD) {
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <button_reading+0x160>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ca:	2b31      	cmp	r3, #49	; 0x31
 80002cc:	d91e      	bls.n	800030c <button_reading+0x12c>
						counterForButtonHold[i] = 0;
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <button_reading+0x160>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2100      	movs	r1, #0
 80002d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonHold[i] = 1;
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <button_reading+0x164>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4413      	add	r3, r2
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
 80002e2:	e013      	b.n	800030c <button_reading+0x12c>
					}
				}
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <button_reading+0x158>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2100      	movs	r1, #0
 80002ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80002ee:	4a13      	ldr	r2, [pc, #76]	; (800033c <button_reading+0x15c>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
			counterForButtonHold[i] = 0;
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <button_reading+0x160>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2100      	movs	r1, #0
 80002fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonHold[i] = 0;
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <button_reading+0x164>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b02      	cmp	r3, #2
 8000316:	f77f af69 	ble.w	80001ec <button_reading+0xc>
		}
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000040 	.word	0x20000040
 8000328:	20000044 	.word	0x20000044
 800032c:	2000003c 	.word	0x2000003c
 8000330:	40010c00 	.word	0x40010c00
 8000334:	20000038 	.word	0x20000038
 8000338:	20000050 	.word	0x20000050
 800033c:	20000048 	.word	0x20000048
 8000340:	20000058 	.word	0x20000058
 8000344:	2000004c 	.word	0x2000004c

08000348 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d901      	bls.n	800035c <is_button_pressed+0x14>
 8000358:	2300      	movs	r3, #0
 800035a:	e007      	b.n	800036c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <is_button_pressed+0x30>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	bf0c      	ite	eq
 8000366:	2301      	moveq	r3, #1
 8000368:	2300      	movne	r3, #0
 800036a:	b2db      	uxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000038 	.word	0x20000038

0800037c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d901      	bls.n	8000390 <is_button_pressed_1s+0x14>
 800038c:	2300      	movs	r3, #0
 800038e:	e007      	b.n	80003a0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <is_button_pressed_1s+0x30>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	2b01      	cmp	r3, #1
 8000398:	bf0c      	ite	eq
 800039a:	2301      	moveq	r3, #1
 800039c:	2300      	movne	r3, #0
 800039e:	b2db      	uxtb	r3, r3
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000048 	.word	0x20000048

080003b0 <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d901      	bls.n	80003c4 <is_button_held+0x14>
 80003c0:	2300      	movs	r3, #0
 80003c2:	e007      	b.n	80003d4 <is_button_held+0x24>
	return (flagForButtonHold[index] == 1);
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <is_button_held+0x30>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	bf0c      	ite	eq
 80003ce:	2301      	moveq	r3, #1
 80003d0:	2300      	movne	r3, #0
 80003d2:	b2db      	uxtb	r3, r3
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2000004c 	.word	0x2000004c

080003e4 <reset_flagForButtonHold>:

void reset_flagForButtonHold(unsigned char index) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	flagForButtonHold[index] = 0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <reset_flagForButtonHold+0x1c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	54d1      	strb	r1, [r2, r3]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	2000004c 	.word	0x2000004c

08000404 <NormalMode>:
extern int count1, count2;          // Biến được khai báo ở file led_display.c
extern enum LEDState state1, state2; // khai báo để sử dụng lại từ file led_display.c

extern int red_value, yellow_value, green_value;

void NormalMode() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
    count1--;
 8000408:	4bab      	ldr	r3, [pc, #684]	; (80006b8 <NormalMode+0x2b4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4aaa      	ldr	r2, [pc, #680]	; (80006b8 <NormalMode+0x2b4>)
 8000410:	6013      	str	r3, [r2, #0]
    count2--;
 8000412:	4baa      	ldr	r3, [pc, #680]	; (80006bc <NormalMode+0x2b8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	4aa8      	ldr	r2, [pc, #672]	; (80006bc <NormalMode+0x2b8>)
 800041a:	6013      	str	r3, [r2, #0]
    switch (state1) {
 800041c:	4ba8      	ldr	r3, [pc, #672]	; (80006c0 <NormalMode+0x2bc>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d069      	beq.n	80004f8 <NormalMode+0xf4>
 8000424:	2b02      	cmp	r3, #2
 8000426:	f300 8098 	bgt.w	800055a <NormalMode+0x156>
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <NormalMode+0x30>
 800042e:	2b01      	cmp	r3, #1
 8000430:	d031      	beq.n	8000496 <NormalMode+0x92>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 8000432:	e092      	b.n	800055a <NormalMode+0x156>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043a:	48a2      	ldr	r0, [pc, #648]	; (80006c4 <NormalMode+0x2c0>)
 800043c:	f001 fd03 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000446:	489f      	ldr	r0, [pc, #636]	; (80006c4 <NormalMode+0x2c0>)
 8000448:	f001 fcfd 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000452:	489c      	ldr	r0, [pc, #624]	; (80006c4 <NormalMode+0x2c0>)
 8000454:	f001 fcf7 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 8000458:	4b97      	ldr	r3, [pc, #604]	; (80006b8 <NormalMode+0x2b4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	da7e      	bge.n	800055e <NormalMode+0x15a>
                count1 = green_value - 1;
 8000460:	4b99      	ldr	r3, [pc, #612]	; (80006c8 <NormalMode+0x2c4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	4a94      	ldr	r2, [pc, #592]	; (80006b8 <NormalMode+0x2b4>)
 8000468:	6013      	str	r3, [r2, #0]
                state1 = GREEN;
 800046a:	4b95      	ldr	r3, [pc, #596]	; (80006c0 <NormalMode+0x2bc>)
 800046c:	2202      	movs	r2, #2
 800046e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	4893      	ldr	r0, [pc, #588]	; (80006c4 <NormalMode+0x2c0>)
 8000478:	f001 fce5 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000482:	4890      	ldr	r0, [pc, #576]	; (80006c4 <NormalMode+0x2c0>)
 8000484:	f001 fcdf 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048e:	488d      	ldr	r0, [pc, #564]	; (80006c4 <NormalMode+0x2c0>)
 8000490:	f001 fcd9 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 8000494:	e063      	b.n	800055e <NormalMode+0x15a>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4889      	ldr	r0, [pc, #548]	; (80006c4 <NormalMode+0x2c0>)
 800049e:	f001 fcd2 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4886      	ldr	r0, [pc, #536]	; (80006c4 <NormalMode+0x2c0>)
 80004aa:	f001 fccc 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b4:	4883      	ldr	r0, [pc, #524]	; (80006c4 <NormalMode+0x2c0>)
 80004b6:	f001 fcc6 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 80004ba:	4b7f      	ldr	r3, [pc, #508]	; (80006b8 <NormalMode+0x2b4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	da4f      	bge.n	8000562 <NormalMode+0x15e>
                count1 = red_value - 1;
 80004c2:	4b82      	ldr	r3, [pc, #520]	; (80006cc <NormalMode+0x2c8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	4a7b      	ldr	r2, [pc, #492]	; (80006b8 <NormalMode+0x2b4>)
 80004ca:	6013      	str	r3, [r2, #0]
                state1 = RED;
 80004cc:	4b7c      	ldr	r3, [pc, #496]	; (80006c0 <NormalMode+0x2bc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	487a      	ldr	r0, [pc, #488]	; (80006c4 <NormalMode+0x2c0>)
 80004da:	f001 fcb4 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e4:	4877      	ldr	r0, [pc, #476]	; (80006c4 <NormalMode+0x2c0>)
 80004e6:	f001 fcae 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f0:	4874      	ldr	r0, [pc, #464]	; (80006c4 <NormalMode+0x2c0>)
 80004f2:	f001 fca8 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 80004f6:	e034      	b.n	8000562 <NormalMode+0x15e>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fe:	4871      	ldr	r0, [pc, #452]	; (80006c4 <NormalMode+0x2c0>)
 8000500:	f001 fca1 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	486e      	ldr	r0, [pc, #440]	; (80006c4 <NormalMode+0x2c0>)
 800050c:	f001 fc9b 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000516:	486b      	ldr	r0, [pc, #428]	; (80006c4 <NormalMode+0x2c0>)
 8000518:	f001 fc95 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 800051c:	4b66      	ldr	r3, [pc, #408]	; (80006b8 <NormalMode+0x2b4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	da20      	bge.n	8000566 <NormalMode+0x162>
                count1 = yellow_value - 1;
 8000524:	4b6a      	ldr	r3, [pc, #424]	; (80006d0 <NormalMode+0x2cc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a63      	ldr	r2, [pc, #396]	; (80006b8 <NormalMode+0x2b4>)
 800052c:	6013      	str	r3, [r2, #0]
                state1 = YELLOW;
 800052e:	4b64      	ldr	r3, [pc, #400]	; (80006c0 <NormalMode+0x2bc>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	4862      	ldr	r0, [pc, #392]	; (80006c4 <NormalMode+0x2c0>)
 800053c:	f001 fc83 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000546:	485f      	ldr	r0, [pc, #380]	; (80006c4 <NormalMode+0x2c0>)
 8000548:	f001 fc7d 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000552:	485c      	ldr	r0, [pc, #368]	; (80006c4 <NormalMode+0x2c0>)
 8000554:	f001 fc77 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 8000558:	e005      	b.n	8000566 <NormalMode+0x162>
            break;
 800055a:	bf00      	nop
 800055c:	e004      	b.n	8000568 <NormalMode+0x164>
            break;
 800055e:	bf00      	nop
 8000560:	e002      	b.n	8000568 <NormalMode+0x164>
            break;
 8000562:	bf00      	nop
 8000564:	e000      	b.n	8000568 <NormalMode+0x164>
            break;
 8000566:	bf00      	nop
    }
    switch (state2) {
 8000568:	4b5a      	ldr	r3, [pc, #360]	; (80006d4 <NormalMode+0x2d0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d069      	beq.n	8000644 <NormalMode+0x240>
 8000570:	2b02      	cmp	r3, #2
 8000572:	f300 8098 	bgt.w	80006a6 <NormalMode+0x2a2>
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <NormalMode+0x17c>
 800057a:	2b01      	cmp	r3, #1
 800057c:	d031      	beq.n	80005e2 <NormalMode+0x1de>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 800057e:	e092      	b.n	80006a6 <NormalMode+0x2a2>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000586:	484f      	ldr	r0, [pc, #316]	; (80006c4 <NormalMode+0x2c0>)
 8000588:	f001 fc5d 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	484c      	ldr	r0, [pc, #304]	; (80006c4 <NormalMode+0x2c0>)
 8000594:	f001 fc57 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4849      	ldr	r0, [pc, #292]	; (80006c4 <NormalMode+0x2c0>)
 80005a0:	f001 fc51 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 80005a4:	4b45      	ldr	r3, [pc, #276]	; (80006bc <NormalMode+0x2b8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da7e      	bge.n	80006aa <NormalMode+0x2a6>
                count2 = green_value - 1;
 80005ac:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <NormalMode+0x2c4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	4a42      	ldr	r2, [pc, #264]	; (80006bc <NormalMode+0x2b8>)
 80005b4:	6013      	str	r3, [r2, #0]
                state2 = GREEN;
 80005b6:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <NormalMode+0x2d0>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c2:	4840      	ldr	r0, [pc, #256]	; (80006c4 <NormalMode+0x2c0>)
 80005c4:	f001 fc3f 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	483d      	ldr	r0, [pc, #244]	; (80006c4 <NormalMode+0x2c0>)
 80005d0:	f001 fc39 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	483a      	ldr	r0, [pc, #232]	; (80006c4 <NormalMode+0x2c0>)
 80005dc:	f001 fc33 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 80005e0:	e063      	b.n	80006aa <NormalMode+0x2a6>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	4836      	ldr	r0, [pc, #216]	; (80006c4 <NormalMode+0x2c0>)
 80005ea:	f001 fc2c 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	4833      	ldr	r0, [pc, #204]	; (80006c4 <NormalMode+0x2c0>)
 80005f6:	f001 fc26 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	4830      	ldr	r0, [pc, #192]	; (80006c4 <NormalMode+0x2c0>)
 8000602:	f001 fc20 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <NormalMode+0x2b8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	da4f      	bge.n	80006ae <NormalMode+0x2aa>
                count2 = red_value - 1;
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <NormalMode+0x2c8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <NormalMode+0x2b8>)
 8000616:	6013      	str	r3, [r2, #0]
                state2 = RED;
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <NormalMode+0x2d0>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000624:	4827      	ldr	r0, [pc, #156]	; (80006c4 <NormalMode+0x2c0>)
 8000626:	f001 fc0e 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <NormalMode+0x2c0>)
 8000632:	f001 fc08 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063c:	4821      	ldr	r0, [pc, #132]	; (80006c4 <NormalMode+0x2c0>)
 800063e:	f001 fc02 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 8000642:	e034      	b.n	80006ae <NormalMode+0x2aa>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064a:	481e      	ldr	r0, [pc, #120]	; (80006c4 <NormalMode+0x2c0>)
 800064c:	f001 fbfb 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <NormalMode+0x2c0>)
 8000658:	f001 fbf5 	bl	8001e46 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4818      	ldr	r0, [pc, #96]	; (80006c4 <NormalMode+0x2c0>)
 8000664:	f001 fbef 	bl	8001e46 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <NormalMode+0x2b8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	da20      	bge.n	80006b2 <NormalMode+0x2ae>
                count2 = yellow_value - 1;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <NormalMode+0x2cc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <NormalMode+0x2b8>)
 8000678:	6013      	str	r3, [r2, #0]
                state2 = YELLOW;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <NormalMode+0x2d0>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000686:	480f      	ldr	r0, [pc, #60]	; (80006c4 <NormalMode+0x2c0>)
 8000688:	f001 fbdd 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480c      	ldr	r0, [pc, #48]	; (80006c4 <NormalMode+0x2c0>)
 8000694:	f001 fbd7 	bl	8001e46 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <NormalMode+0x2c0>)
 80006a0:	f001 fbd1 	bl	8001e46 <HAL_GPIO_WritePin>
            break;
 80006a4:	e005      	b.n	80006b2 <NormalMode+0x2ae>
            break;
 80006a6:	bf00      	nop
 80006a8:	e004      	b.n	80006b4 <NormalMode+0x2b0>
            break;
 80006aa:	bf00      	nop
 80006ac:	e002      	b.n	80006b4 <NormalMode+0x2b0>
            break;
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <NormalMode+0x2b0>
            break;
 80006b2:	bf00      	nop
    }
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000063 	.word	0x20000063
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	20000070 	.word	0x20000070
 80006cc:	20000068 	.word	0x20000068
 80006d0:	20000078 	.word	0x20000078
 80006d4:	2000000c 	.word	0x2000000c

080006d8 <toggle_red>:

void toggle_red(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
				HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <toggle_red+0x4c>)
 80006e2:	f001 fbc8 	bl	8001e76 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <toggle_red+0x4c>)
 80006ec:	f001 fbc3 	bl	8001e76 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <toggle_red+0x4c>)
 80006f8:	f001 fba5 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <toggle_red+0x4c>)
 8000704:	f001 fb9f 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <toggle_red+0x4c>)
 8000710:	f001 fb99 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4802      	ldr	r0, [pc, #8]	; (8000724 <toggle_red+0x4c>)
 800071c:	f001 fb93 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40010c00 	.word	0x40010c00

08000728 <toggle_yellow>:

void toggle_yellow(){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	 	 	 	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 800072c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <toggle_yellow+0x4c>)
 8000732:	f001 fba0 	bl	8001e76 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <toggle_yellow+0x4c>)
 800073c:	f001 fb9b 	bl	8001e76 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <toggle_yellow+0x4c>)
 8000748:	f001 fb7d 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <toggle_yellow+0x4c>)
 8000754:	f001 fb77 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <toggle_yellow+0x4c>)
 8000760:	f001 fb71 	bl	8001e46 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <toggle_yellow+0x4c>)
 800076c:	f001 fb6b 	bl	8001e46 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010c00 	.word	0x40010c00

08000778 <toggle_green>:

void toggle_green(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
					HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 800077c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000780:	4810      	ldr	r0, [pc, #64]	; (80007c4 <toggle_green+0x4c>)
 8000782:	f001 fb78 	bl	8001e76 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <toggle_green+0x4c>)
 800078c:	f001 fb73 	bl	8001e76 <HAL_GPIO_TogglePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <toggle_green+0x4c>)
 8000798:	f001 fb55 	bl	8001e46 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <toggle_green+0x4c>)
 80007a4:	f001 fb4f 	bl	8001e46 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <toggle_green+0x4c>)
 80007b0:	f001 fb49 	bl	8001e46 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ba:	4802      	ldr	r0, [pc, #8]	; (80007c4 <toggle_green+0x4c>)
 80007bc:	f001 fb43 	bl	8001e46 <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <fsm_automatic>:

void fsm_automatic() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    switch (mode) {
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <fsm_automatic+0x44>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d816      	bhi.n	8000804 <fsm_automatic+0x3c>
 80007d6:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <fsm_automatic+0x14>)
 80007d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007dc:	080007ed 	.word	0x080007ed
 80007e0:	080007f3 	.word	0x080007f3
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	080007ff 	.word	0x080007ff
        case 1:
            NormalMode();
 80007ec:	f7ff fe0a 	bl	8000404 <NormalMode>
            break;
 80007f0:	e009      	b.n	8000806 <fsm_automatic+0x3e>
        case 2:
            toggle_red();
 80007f2:	f7ff ff71 	bl	80006d8 <toggle_red>
            break;
 80007f6:	e006      	b.n	8000806 <fsm_automatic+0x3e>
        case 3:
           toggle_yellow();
 80007f8:	f7ff ff96 	bl	8000728 <toggle_yellow>
            break;
 80007fc:	e003      	b.n	8000806 <fsm_automatic+0x3e>
        case 4:
            toggle_green();
 80007fe:	f7ff ffbb 	bl	8000778 <toggle_green>
            break;
 8000802:	e000      	b.n	8000806 <fsm_automatic+0x3e>
        default:
            break;
 8000804:	bf00      	nop
    }
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000

08000810 <fsm_manual>:


enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void fsm_manual() {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

    switch (buttonState[0]) {
 8000816:	4b9c      	ldr	r3, [pc, #624]	; (8000a88 <fsm_manual+0x278>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <fsm_manual+0x14>
 800081e:	2b01      	cmp	r3, #1
 8000820:	d018      	beq.n	8000854 <fsm_manual+0x44>
            if (!is_button_pressed(0)) {
                buttonState[0] = BUTTON_RELEASED;
            }
            break;
        default:
            break;
 8000822:	e024      	b.n	800086e <fsm_manual+0x5e>
            if (is_button_pressed(0)) {
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd8f 	bl	8000348 <is_button_pressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d01b      	beq.n	8000868 <fsm_manual+0x58>
                buttonState[0] = BUTTON_PRESSED;
 8000830:	4b95      	ldr	r3, [pc, #596]	; (8000a88 <fsm_manual+0x278>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
                mode++;
 8000836:	4b95      	ldr	r3, [pc, #596]	; (8000a8c <fsm_manual+0x27c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a93      	ldr	r2, [pc, #588]	; (8000a8c <fsm_manual+0x27c>)
 800083e:	6013      	str	r3, [r2, #0]
                if (mode > 4) {
 8000840:	4b92      	ldr	r3, [pc, #584]	; (8000a8c <fsm_manual+0x27c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b04      	cmp	r3, #4
 8000846:	dd0f      	ble.n	8000868 <fsm_manual+0x58>
                    mode = 1;
 8000848:	4b90      	ldr	r3, [pc, #576]	; (8000a8c <fsm_manual+0x27c>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
                    resetCountValue();
 800084e:	f000 f9b3 	bl	8000bb8 <resetCountValue>
            break;
 8000852:	e009      	b.n	8000868 <fsm_manual+0x58>
            if (!is_button_pressed(0)) {
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fd77 	bl	8000348 <is_button_pressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d105      	bne.n	800086c <fsm_manual+0x5c>
                buttonState[0] = BUTTON_RELEASED;
 8000860:	4b89      	ldr	r3, [pc, #548]	; (8000a88 <fsm_manual+0x278>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
            break;
 8000866:	e001      	b.n	800086c <fsm_manual+0x5c>
            break;
 8000868:	bf00      	nop
 800086a:	e000      	b.n	800086e <fsm_manual+0x5e>
            break;
 800086c:	bf00      	nop
    }


    switch (buttonState[1]) {
 800086e:	4b86      	ldr	r3, [pc, #536]	; (8000a88 <fsm_manual+0x278>)
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	2b02      	cmp	r3, #2
 8000874:	f000 809b 	beq.w	80009ae <fsm_manual+0x19e>
 8000878:	2b02      	cmp	r3, #2
 800087a:	f300 80e6 	bgt.w	8000a4a <fsm_manual+0x23a>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <fsm_manual+0x78>
 8000882:	2b01      	cmp	r3, #1
 8000884:	d045      	beq.n	8000912 <fsm_manual+0x102>
                        break;
                }
            }
            break;
        default:
            break;
 8000886:	e0e0      	b.n	8000a4a <fsm_manual+0x23a>
            if (is_button_pressed(1)) {
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fd5d 	bl	8000348 <is_button_pressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d034      	beq.n	80008fe <fsm_manual+0xee>
                buttonState[1] = BUTTON_PRESSED;
 8000894:	4b7c      	ldr	r3, [pc, #496]	; (8000a88 <fsm_manual+0x278>)
 8000896:	2201      	movs	r2, #1
 8000898:	705a      	strb	r2, [r3, #1]
                switch (mode) {
 800089a:	4b7c      	ldr	r3, [pc, #496]	; (8000a8c <fsm_manual+0x27c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d020      	beq.n	80008e4 <fsm_manual+0xd4>
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	dc2d      	bgt.n	8000902 <fsm_manual+0xf2>
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d002      	beq.n	80008b0 <fsm_manual+0xa0>
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d00d      	beq.n	80008ca <fsm_manual+0xba>
                        break;
 80008ae:	e028      	b.n	8000902 <fsm_manual+0xf2>
                        red_draft++;
 80008b0:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <fsm_manual+0x280>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a76      	ldr	r2, [pc, #472]	; (8000a90 <fsm_manual+0x280>)
 80008b8:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 80008ba:	4b75      	ldr	r3, [pc, #468]	; (8000a90 <fsm_manual+0x280>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b63      	cmp	r3, #99	; 0x63
 80008c0:	dd21      	ble.n	8000906 <fsm_manual+0xf6>
 80008c2:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <fsm_manual+0x280>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
                        break;
 80008c8:	e01d      	b.n	8000906 <fsm_manual+0xf6>
                        yellow_draft++;
 80008ca:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <fsm_manual+0x284>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a70      	ldr	r2, [pc, #448]	; (8000a94 <fsm_manual+0x284>)
 80008d2:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 80008d4:	4b6f      	ldr	r3, [pc, #444]	; (8000a94 <fsm_manual+0x284>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b63      	cmp	r3, #99	; 0x63
 80008da:	dd16      	ble.n	800090a <fsm_manual+0xfa>
 80008dc:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <fsm_manual+0x284>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
                        break;
 80008e2:	e012      	b.n	800090a <fsm_manual+0xfa>
                        green_draft++;
 80008e4:	4b6c      	ldr	r3, [pc, #432]	; (8000a98 <fsm_manual+0x288>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a6b      	ldr	r2, [pc, #428]	; (8000a98 <fsm_manual+0x288>)
 80008ec:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 80008ee:	4b6a      	ldr	r3, [pc, #424]	; (8000a98 <fsm_manual+0x288>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b63      	cmp	r3, #99	; 0x63
 80008f4:	dd0b      	ble.n	800090e <fsm_manual+0xfe>
 80008f6:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <fsm_manual+0x288>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
                        break;
 80008fc:	e007      	b.n	800090e <fsm_manual+0xfe>
            }
 80008fe:	bf00      	nop
 8000900:	e0a4      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000902:	bf00      	nop
 8000904:	e0a2      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000906:	bf00      	nop
 8000908:	e0a0      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 800090a:	bf00      	nop
 800090c:	e09e      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 800090e:	bf00      	nop
            break;
 8000910:	e09c      	b.n	8000a4c <fsm_manual+0x23c>
            if (!is_button_pressed(1)) {
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff fd18 	bl	8000348 <is_button_pressed>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <fsm_manual+0x114>
                buttonState[1] = BUTTON_RELEASED;
 800091e:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <fsm_manual+0x278>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
            if (is_button_pressed_1s(1)) {
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fd29 	bl	800037c <is_button_pressed_1s>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d034      	beq.n	800099a <fsm_manual+0x18a>
                buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000930:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <fsm_manual+0x278>)
 8000932:	2202      	movs	r2, #2
 8000934:	705a      	strb	r2, [r3, #1]
                switch (mode) {
 8000936:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <fsm_manual+0x27c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d020      	beq.n	8000980 <fsm_manual+0x170>
 800093e:	2b04      	cmp	r3, #4
 8000940:	dc2d      	bgt.n	800099e <fsm_manual+0x18e>
 8000942:	2b02      	cmp	r3, #2
 8000944:	d002      	beq.n	800094c <fsm_manual+0x13c>
 8000946:	2b03      	cmp	r3, #3
 8000948:	d00d      	beq.n	8000966 <fsm_manual+0x156>
                        break;
 800094a:	e028      	b.n	800099e <fsm_manual+0x18e>
                        red_draft++;
 800094c:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <fsm_manual+0x280>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <fsm_manual+0x280>)
 8000954:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 8000956:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <fsm_manual+0x280>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b63      	cmp	r3, #99	; 0x63
 800095c:	dd21      	ble.n	80009a2 <fsm_manual+0x192>
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <fsm_manual+0x280>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
                        break;
 8000964:	e01d      	b.n	80009a2 <fsm_manual+0x192>
                        yellow_draft++;
 8000966:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <fsm_manual+0x284>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a49      	ldr	r2, [pc, #292]	; (8000a94 <fsm_manual+0x284>)
 800096e:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <fsm_manual+0x284>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b63      	cmp	r3, #99	; 0x63
 8000976:	dd16      	ble.n	80009a6 <fsm_manual+0x196>
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <fsm_manual+0x284>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
                        break;
 800097e:	e012      	b.n	80009a6 <fsm_manual+0x196>
                        green_draft++;
 8000980:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <fsm_manual+0x288>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <fsm_manual+0x288>)
 8000988:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 800098a:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <fsm_manual+0x288>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b63      	cmp	r3, #99	; 0x63
 8000990:	dd0b      	ble.n	80009aa <fsm_manual+0x19a>
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <fsm_manual+0x288>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
                        break;
 8000998:	e007      	b.n	80009aa <fsm_manual+0x19a>
            }
 800099a:	bf00      	nop
 800099c:	e056      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 800099e:	bf00      	nop
 80009a0:	e054      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 80009a2:	bf00      	nop
 80009a4:	e052      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 80009a6:	bf00      	nop
 80009a8:	e050      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 80009aa:	bf00      	nop
            break;
 80009ac:	e04e      	b.n	8000a4c <fsm_manual+0x23c>
            if (!is_button_pressed(1)) {
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fcca 	bl	8000348 <is_button_pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <fsm_manual+0x1b0>
                buttonState[1] = BUTTON_RELEASED;
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <fsm_manual+0x278>)
 80009bc:	2200      	movs	r2, #0
 80009be:	705a      	strb	r2, [r3, #1]
            if (is_button_held(1)) {
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fcf5 	bl	80003b0 <is_button_held>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d034      	beq.n	8000a36 <fsm_manual+0x226>
                reset_flagForButtonHold(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fd09 	bl	80003e4 <reset_flagForButtonHold>
                switch (mode) {
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <fsm_manual+0x27c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d020      	beq.n	8000a1c <fsm_manual+0x20c>
 80009da:	2b04      	cmp	r3, #4
 80009dc:	dc2d      	bgt.n	8000a3a <fsm_manual+0x22a>
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d002      	beq.n	80009e8 <fsm_manual+0x1d8>
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d00d      	beq.n	8000a02 <fsm_manual+0x1f2>
                        break;
 80009e6:	e028      	b.n	8000a3a <fsm_manual+0x22a>
                        red_draft++;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <fsm_manual+0x280>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <fsm_manual+0x280>)
 80009f0:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <fsm_manual+0x280>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b63      	cmp	r3, #99	; 0x63
 80009f8:	dd21      	ble.n	8000a3e <fsm_manual+0x22e>
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <fsm_manual+0x280>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
                        break;
 8000a00:	e01d      	b.n	8000a3e <fsm_manual+0x22e>
                        yellow_draft++;
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <fsm_manual+0x284>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <fsm_manual+0x284>)
 8000a0a:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <fsm_manual+0x284>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b63      	cmp	r3, #99	; 0x63
 8000a12:	dd16      	ble.n	8000a42 <fsm_manual+0x232>
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <fsm_manual+0x284>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
                        break;
 8000a1a:	e012      	b.n	8000a42 <fsm_manual+0x232>
                        green_draft++;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <fsm_manual+0x288>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <fsm_manual+0x288>)
 8000a24:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <fsm_manual+0x288>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b63      	cmp	r3, #99	; 0x63
 8000a2c:	dd0b      	ble.n	8000a46 <fsm_manual+0x236>
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <fsm_manual+0x288>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
                        break;
 8000a34:	e007      	b.n	8000a46 <fsm_manual+0x236>
            }
 8000a36:	bf00      	nop
 8000a38:	e008      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000a3a:	bf00      	nop
 8000a3c:	e006      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000a3e:	bf00      	nop
 8000a40:	e004      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <fsm_manual+0x23c>
                        break;
 8000a46:	bf00      	nop
            break;
 8000a48:	e000      	b.n	8000a4c <fsm_manual+0x23c>
            break;
 8000a4a:	bf00      	nop
    }


    switch (buttonState[2]) {
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <fsm_manual+0x278>)
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <fsm_manual+0x24a>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d06a      	beq.n	8000b2e <fsm_manual+0x31e>
            if (!is_button_pressed(2)) {
                buttonState[2] = BUTTON_RELEASED;
            }
            break;
        default:
            break;
 8000a58:	e073      	b.n	8000b42 <fsm_manual+0x332>
            if (is_button_pressed(2)) {
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fc74 	bl	8000348 <is_button_pressed>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d05f      	beq.n	8000b26 <fsm_manual+0x316>
                buttonState[2] = BUTTON_PRESSED;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <fsm_manual+0x278>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	709a      	strb	r2, [r3, #2]
                int diff = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
                switch (mode) {
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <fsm_manual+0x27c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d03f      	beq.n	8000af8 <fsm_manual+0x2e8>
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	dc56      	bgt.n	8000b2a <fsm_manual+0x31a>
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d00d      	beq.n	8000a9c <fsm_manual+0x28c>
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d022      	beq.n	8000aca <fsm_manual+0x2ba>
                        break;
 8000a84:	e051      	b.n	8000b2a <fsm_manual+0x31a>
 8000a86:	bf00      	nop
 8000a88:	20000060 	.word	0x20000060
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	2000007c 	.word	0x2000007c
 8000a94:	2000006c 	.word	0x2000006c
 8000a98:	20000074 	.word	0x20000074
                        diff = red_draft - red_value;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <fsm_manual+0x33c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <fsm_manual+0x340>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	607b      	str	r3, [r7, #4]
                        red_value = red_draft;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <fsm_manual+0x33c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a28      	ldr	r2, [pc, #160]	; (8000b50 <fsm_manual+0x340>)
 8000aae:	6013      	str	r3, [r2, #0]
                        green_value += diff;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <fsm_manual+0x344>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <fsm_manual+0x344>)
 8000aba:	6013      	str	r3, [r2, #0]
                        green_draft += diff;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <fsm_manual+0x348>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <fsm_manual+0x348>)
 8000ac6:	6013      	str	r3, [r2, #0]
                        break;
 8000ac8:	e030      	b.n	8000b2c <fsm_manual+0x31c>
                        diff = yellow_draft - yellow_value;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <fsm_manual+0x34c>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <fsm_manual+0x350>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	607b      	str	r3, [r7, #4]
                        yellow_value = yellow_draft;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <fsm_manual+0x34c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <fsm_manual+0x350>)
 8000adc:	6013      	str	r3, [r2, #0]
                        red_value += diff;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <fsm_manual+0x340>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <fsm_manual+0x340>)
 8000ae8:	6013      	str	r3, [r2, #0]
                        red_draft += diff;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <fsm_manual+0x33c>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <fsm_manual+0x33c>)
 8000af4:	6013      	str	r3, [r2, #0]
                        break;
 8000af6:	e019      	b.n	8000b2c <fsm_manual+0x31c>
                        diff = green_draft - green_value;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <fsm_manual+0x348>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <fsm_manual+0x344>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	607b      	str	r3, [r7, #4]
                        green_value = green_draft;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <fsm_manual+0x348>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <fsm_manual+0x344>)
 8000b0a:	6013      	str	r3, [r2, #0]
                        green_value += diff;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <fsm_manual+0x344>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <fsm_manual+0x344>)
 8000b16:	6013      	str	r3, [r2, #0]
                        green_draft += diff;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <fsm_manual+0x348>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <fsm_manual+0x348>)
 8000b22:	6013      	str	r3, [r2, #0]
                        break;
 8000b24:	e002      	b.n	8000b2c <fsm_manual+0x31c>
            }
 8000b26:	bf00      	nop
 8000b28:	e00b      	b.n	8000b42 <fsm_manual+0x332>
                        break;
 8000b2a:	bf00      	nop
            break;
 8000b2c:	e009      	b.n	8000b42 <fsm_manual+0x332>
            if (!is_button_pressed(2)) {
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff fc0a 	bl	8000348 <is_button_pressed>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <fsm_manual+0x330>
                buttonState[2] = BUTTON_RELEASED;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <fsm_manual+0x354>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	709a      	strb	r2, [r3, #2]
            break;
 8000b40:	bf00      	nop
    }
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000007c 	.word	0x2000007c
 8000b50:	20000068 	.word	0x20000068
 8000b54:	20000070 	.word	0x20000070
 8000b58:	20000074 	.word	0x20000074
 8000b5c:	2000006c 	.word	0x2000006c
 8000b60:	20000078 	.word	0x20000078
 8000b64:	20000060 	.word	0x20000060

08000b68 <LedTimeDurationInit>:
#include "global.h"
int mode = 1;
int red_value, yellow_value, green_value;
int red_draft, yellow_draft, green_draft;

void LedTimeDurationInit() {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	red_value = RED_INIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LedTimeDurationInit+0x38>)
 8000b6e:	220a      	movs	r2, #10
 8000b70:	601a      	str	r2, [r3, #0]
	yellow_value = YELLOW_INIT;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LedTimeDurationInit+0x3c>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	601a      	str	r2, [r3, #0]
	green_value = GREEN_INIT;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LedTimeDurationInit+0x40>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	601a      	str	r2, [r3, #0]
	red_draft = red_value;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LedTimeDurationInit+0x38>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LedTimeDurationInit+0x44>)
 8000b84:	6013      	str	r3, [r2, #0]
	yellow_draft = yellow_value;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LedTimeDurationInit+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <LedTimeDurationInit+0x48>)
 8000b8c:	6013      	str	r3, [r2, #0]
	green_draft = green_value;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LedTimeDurationInit+0x40>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <LedTimeDurationInit+0x4c>)
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000068 	.word	0x20000068
 8000ba4:	20000078 	.word	0x20000078
 8000ba8:	20000070 	.word	0x20000070
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	2000006c 	.word	0x2000006c
 8000bb4:	20000074 	.word	0x20000074

08000bb8 <resetCountValue>:
int count1 = RED_INIT;
int count2 = GREEN_INIT;
enum LEDState state1 = RED;
enum LEDState state2 = GREEN;

void resetCountValue() {
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	count1 = red_value;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <resetCountValue+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <resetCountValue+0x2c>)
 8000bc2:	6013      	str	r3, [r2, #0]
	count2 = green_value;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <resetCountValue+0x30>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <resetCountValue+0x34>)
 8000bca:	6013      	str	r3, [r2, #0]
	state1 = RED;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <resetCountValue+0x38>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <resetCountValue+0x3c>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	20000068 	.word	0x20000068
 8000be4:	20000004 	.word	0x20000004
 8000be8:	20000070 	.word	0x20000070
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000063 	.word	0x20000063
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <display7SEG>:

static void display7SEG(int num) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	f200 8180 	bhi.w	8000f08 <display7SEG+0x310>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <display7SEG+0x18>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	08000c81 	.word	0x08000c81
 8000c18:	08000cc9 	.word	0x08000cc9
 8000c1c:	08000d11 	.word	0x08000d11
 8000c20:	08000d59 	.word	0x08000d59
 8000c24:	08000da1 	.word	0x08000da1
 8000c28:	08000de9 	.word	0x08000de9
 8000c2c:	08000e31 	.word	0x08000e31
 8000c30:	08000e79 	.word	0x08000e79
 8000c34:	08000ec1 	.word	0x08000ec1
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	48b5      	ldr	r0, [pc, #724]	; (8000f14 <display7SEG+0x31c>)
 8000c3e:	f001 f902 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	48b3      	ldr	r0, [pc, #716]	; (8000f14 <display7SEG+0x31c>)
 8000c48:	f001 f8fd 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2104      	movs	r1, #4
 8000c50:	48b0      	ldr	r0, [pc, #704]	; (8000f14 <display7SEG+0x31c>)
 8000c52:	f001 f8f8 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	48ae      	ldr	r0, [pc, #696]	; (8000f14 <display7SEG+0x31c>)
 8000c5c:	f001 f8f3 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2110      	movs	r1, #16
 8000c64:	48ab      	ldr	r0, [pc, #684]	; (8000f14 <display7SEG+0x31c>)
 8000c66:	f001 f8ee 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	48a9      	ldr	r0, [pc, #676]	; (8000f14 <display7SEG+0x31c>)
 8000c70:	f001 f8e9 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	48a6      	ldr	r0, [pc, #664]	; (8000f14 <display7SEG+0x31c>)
 8000c7a:	f001 f8e4 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000c7e:	e144      	b.n	8000f0a <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	48a3      	ldr	r0, [pc, #652]	; (8000f14 <display7SEG+0x31c>)
 8000c86:	f001 f8de 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	48a1      	ldr	r0, [pc, #644]	; (8000f14 <display7SEG+0x31c>)
 8000c90:	f001 f8d9 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	489e      	ldr	r0, [pc, #632]	; (8000f14 <display7SEG+0x31c>)
 8000c9a:	f001 f8d4 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	489c      	ldr	r0, [pc, #624]	; (8000f14 <display7SEG+0x31c>)
 8000ca4:	f001 f8cf 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	4899      	ldr	r0, [pc, #612]	; (8000f14 <display7SEG+0x31c>)
 8000cae:	f001 f8ca 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4897      	ldr	r0, [pc, #604]	; (8000f14 <display7SEG+0x31c>)
 8000cb8:	f001 f8c5 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4894      	ldr	r0, [pc, #592]	; (8000f14 <display7SEG+0x31c>)
 8000cc2:	f001 f8c0 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000cc6:	e120      	b.n	8000f0a <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4891      	ldr	r0, [pc, #580]	; (8000f14 <display7SEG+0x31c>)
 8000cce:	f001 f8ba 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	488f      	ldr	r0, [pc, #572]	; (8000f14 <display7SEG+0x31c>)
 8000cd8:	f001 f8b5 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	488c      	ldr	r0, [pc, #560]	; (8000f14 <display7SEG+0x31c>)
 8000ce2:	f001 f8b0 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2108      	movs	r1, #8
 8000cea:	488a      	ldr	r0, [pc, #552]	; (8000f14 <display7SEG+0x31c>)
 8000cec:	f001 f8ab 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4887      	ldr	r0, [pc, #540]	; (8000f14 <display7SEG+0x31c>)
 8000cf6:	f001 f8a6 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4885      	ldr	r0, [pc, #532]	; (8000f14 <display7SEG+0x31c>)
 8000d00:	f001 f8a1 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4882      	ldr	r0, [pc, #520]	; (8000f14 <display7SEG+0x31c>)
 8000d0a:	f001 f89c 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000d0e:	e0fc      	b.n	8000f0a <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	487f      	ldr	r0, [pc, #508]	; (8000f14 <display7SEG+0x31c>)
 8000d16:	f001 f896 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	487d      	ldr	r0, [pc, #500]	; (8000f14 <display7SEG+0x31c>)
 8000d20:	f001 f891 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2104      	movs	r1, #4
 8000d28:	487a      	ldr	r0, [pc, #488]	; (8000f14 <display7SEG+0x31c>)
 8000d2a:	f001 f88c 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2108      	movs	r1, #8
 8000d32:	4878      	ldr	r0, [pc, #480]	; (8000f14 <display7SEG+0x31c>)
 8000d34:	f001 f887 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4875      	ldr	r0, [pc, #468]	; (8000f14 <display7SEG+0x31c>)
 8000d3e:	f001 f882 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4873      	ldr	r0, [pc, #460]	; (8000f14 <display7SEG+0x31c>)
 8000d48:	f001 f87d 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4870      	ldr	r0, [pc, #448]	; (8000f14 <display7SEG+0x31c>)
 8000d52:	f001 f878 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000d56:	e0d8      	b.n	8000f0a <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	486d      	ldr	r0, [pc, #436]	; (8000f14 <display7SEG+0x31c>)
 8000d5e:	f001 f872 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2102      	movs	r1, #2
 8000d66:	486b      	ldr	r0, [pc, #428]	; (8000f14 <display7SEG+0x31c>)
 8000d68:	f001 f86d 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4868      	ldr	r0, [pc, #416]	; (8000f14 <display7SEG+0x31c>)
 8000d72:	f001 f868 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4866      	ldr	r0, [pc, #408]	; (8000f14 <display7SEG+0x31c>)
 8000d7c:	f001 f863 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	4863      	ldr	r0, [pc, #396]	; (8000f14 <display7SEG+0x31c>)
 8000d86:	f001 f85e 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4861      	ldr	r0, [pc, #388]	; (8000f14 <display7SEG+0x31c>)
 8000d90:	f001 f859 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	485e      	ldr	r0, [pc, #376]	; (8000f14 <display7SEG+0x31c>)
 8000d9a:	f001 f854 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000d9e:	e0b4      	b.n	8000f0a <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2101      	movs	r1, #1
 8000da4:	485b      	ldr	r0, [pc, #364]	; (8000f14 <display7SEG+0x31c>)
 8000da6:	f001 f84e 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	4859      	ldr	r0, [pc, #356]	; (8000f14 <display7SEG+0x31c>)
 8000db0:	f001 f849 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2104      	movs	r1, #4
 8000db8:	4856      	ldr	r0, [pc, #344]	; (8000f14 <display7SEG+0x31c>)
 8000dba:	f001 f844 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4854      	ldr	r0, [pc, #336]	; (8000f14 <display7SEG+0x31c>)
 8000dc4:	f001 f83f 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4851      	ldr	r0, [pc, #324]	; (8000f14 <display7SEG+0x31c>)
 8000dce:	f001 f83a 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <display7SEG+0x31c>)
 8000dd8:	f001 f835 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	484c      	ldr	r0, [pc, #304]	; (8000f14 <display7SEG+0x31c>)
 8000de2:	f001 f830 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000de6:	e090      	b.n	8000f0a <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2101      	movs	r1, #1
 8000dec:	4849      	ldr	r0, [pc, #292]	; (8000f14 <display7SEG+0x31c>)
 8000dee:	f001 f82a 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2102      	movs	r1, #2
 8000df6:	4847      	ldr	r0, [pc, #284]	; (8000f14 <display7SEG+0x31c>)
 8000df8:	f001 f825 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4844      	ldr	r0, [pc, #272]	; (8000f14 <display7SEG+0x31c>)
 8000e02:	f001 f820 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4842      	ldr	r0, [pc, #264]	; (8000f14 <display7SEG+0x31c>)
 8000e0c:	f001 f81b 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	483f      	ldr	r0, [pc, #252]	; (8000f14 <display7SEG+0x31c>)
 8000e16:	f001 f816 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	483d      	ldr	r0, [pc, #244]	; (8000f14 <display7SEG+0x31c>)
 8000e20:	f001 f811 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <display7SEG+0x31c>)
 8000e2a:	f001 f80c 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000e2e:	e06c      	b.n	8000f0a <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2101      	movs	r1, #1
 8000e34:	4837      	ldr	r0, [pc, #220]	; (8000f14 <display7SEG+0x31c>)
 8000e36:	f001 f806 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4835      	ldr	r0, [pc, #212]	; (8000f14 <display7SEG+0x31c>)
 8000e40:	f001 f801 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2104      	movs	r1, #4
 8000e48:	4832      	ldr	r0, [pc, #200]	; (8000f14 <display7SEG+0x31c>)
 8000e4a:	f000 fffc 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	4830      	ldr	r0, [pc, #192]	; (8000f14 <display7SEG+0x31c>)
 8000e54:	f000 fff7 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	482d      	ldr	r0, [pc, #180]	; (8000f14 <display7SEG+0x31c>)
 8000e5e:	f000 fff2 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	482b      	ldr	r0, [pc, #172]	; (8000f14 <display7SEG+0x31c>)
 8000e68:	f000 ffed 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	4828      	ldr	r0, [pc, #160]	; (8000f14 <display7SEG+0x31c>)
 8000e72:	f000 ffe8 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000e76:	e048      	b.n	8000f0a <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4825      	ldr	r0, [pc, #148]	; (8000f14 <display7SEG+0x31c>)
 8000e7e:	f000 ffe2 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2102      	movs	r1, #2
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <display7SEG+0x31c>)
 8000e88:	f000 ffdd 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4820      	ldr	r0, [pc, #128]	; (8000f14 <display7SEG+0x31c>)
 8000e92:	f000 ffd8 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <display7SEG+0x31c>)
 8000e9c:	f000 ffd3 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <display7SEG+0x31c>)
 8000ea6:	f000 ffce 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	4819      	ldr	r0, [pc, #100]	; (8000f14 <display7SEG+0x31c>)
 8000eb0:	f000 ffc9 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4816      	ldr	r0, [pc, #88]	; (8000f14 <display7SEG+0x31c>)
 8000eba:	f000 ffc4 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000ebe:	e024      	b.n	8000f0a <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <display7SEG+0x31c>)
 8000ec6:	f000 ffbe 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <display7SEG+0x31c>)
 8000ed0:	f000 ffb9 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <display7SEG+0x31c>)
 8000eda:	f000 ffb4 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <display7SEG+0x31c>)
 8000ee4:	f000 ffaf 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <display7SEG+0x31c>)
 8000eee:	f000 ffaa 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <display7SEG+0x31c>)
 8000ef8:	f000 ffa5 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <display7SEG+0x31c>)
 8000f02:	f000 ffa0 	bl	8001e46 <HAL_GPIO_WritePin>
			break;
 8000f06:	e000      	b.n	8000f0a <display7SEG+0x312>
		  default:
			  break;
 8000f08:	bf00      	nop
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800

08000f18 <get7SEG1Value>:

static int get7SEG1Value() {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <get7SEG1Value+0x48>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d816      	bhi.n	8000f54 <get7SEG1Value+0x3c>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <get7SEG1Value+0x14>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f43 	.word	0x08000f43
 8000f34:	08000f49 	.word	0x08000f49
 8000f38:	08000f4f 	.word	0x08000f4f
		case 1:
			return count1;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <get7SEG1Value+0x4c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e00a      	b.n	8000f58 <get7SEG1Value+0x40>
		case 2:
			return red_draft;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <get7SEG1Value+0x50>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <get7SEG1Value+0x40>
		case 3:
			return yellow_draft;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <get7SEG1Value+0x54>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e004      	b.n	8000f58 <get7SEG1Value+0x40>
		case 4:
			return green_draft;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <get7SEG1Value+0x58>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e001      	b.n	8000f58 <get7SEG1Value+0x40>
		default:
			break;
 8000f54:	bf00      	nop
	}
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004
 8000f68:	2000007c 	.word	0x2000007c
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	20000074 	.word	0x20000074

08000f74 <get7SEG2Value>:
static int get7SEG2Value() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <get7SEG2Value+0x48>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d816      	bhi.n	8000fb0 <get7SEG2Value+0x3c>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <get7SEG2Value+0x14>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08000f99 	.word	0x08000f99
 8000f8c:	08000f9f 	.word	0x08000f9f
 8000f90:	08000fa5 	.word	0x08000fa5
 8000f94:	08000fab 	.word	0x08000fab
		case 1:
			return count2;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <get7SEG2Value+0x4c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	e00a      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 2:
			return red_draft;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <get7SEG2Value+0x50>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 3:
			return yellow_draft;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <get7SEG2Value+0x54>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e004      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 4:
			return green_draft;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <get7SEG2Value+0x58>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e001      	b.n	8000fb4 <get7SEG2Value+0x40>
		default:
			break;
 8000fb0:	bf00      	nop
	}
	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000007c 	.word	0x2000007c
 8000fc8:	2000006c 	.word	0x2000006c
 8000fcc:	20000074 	.word	0x20000074

08000fd0 <LEDScanning>:

//-------------------------quét led--------------------------------------
void LEDScanning() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	static int scan_index = 0;
	switch (scan_index) {
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <LEDScanning+0x208>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	f200 80f6 	bhi.w	80011ca <LEDScanning+0x1fa>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LEDScanning+0x14>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08000ff9 	.word	0x08000ff9
 8000fe8:	08001055 	.word	0x08001055
 8000fec:	080010bb 	.word	0x080010bb
 8000ff0:	08001117 	.word	0x08001117
 8000ff4:	0800117d 	.word	0x0800117d
		case 0:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4877      	ldr	r0, [pc, #476]	; (80011dc <LEDScanning+0x20c>)
 8001000:	f000 ff21 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100a:	4874      	ldr	r0, [pc, #464]	; (80011dc <LEDScanning+0x20c>)
 800100c:	f000 ff1b 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	4871      	ldr	r0, [pc, #452]	; (80011dc <LEDScanning+0x20c>)
 8001018:	f000 ff15 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	486e      	ldr	r0, [pc, #440]	; (80011dc <LEDScanning+0x20c>)
 8001024:	f000 ff0f 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	486b      	ldr	r0, [pc, #428]	; (80011dc <LEDScanning+0x20c>)
 8001030:	f000 ff09 	bl	8001e46 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() / 10);
 8001034:	f7ff ff70 	bl	8000f18 <get7SEG1Value>
 8001038:	4603      	mov	r3, r0
 800103a:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <LEDScanning+0x210>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1092      	asrs	r2, r2, #2
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdd6 	bl	8000bf8 <display7SEG>
			scan_index = 1;
 800104c:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <LEDScanning+0x208>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
			break;
 8001052:	e0be      	b.n	80011d2 <LEDScanning+0x202>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4860      	ldr	r0, [pc, #384]	; (80011dc <LEDScanning+0x20c>)
 800105c:	f000 fef3 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	485d      	ldr	r0, [pc, #372]	; (80011dc <LEDScanning+0x20c>)
 8001068:	f000 feed 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001072:	485a      	ldr	r0, [pc, #360]	; (80011dc <LEDScanning+0x20c>)
 8001074:	f000 fee7 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4857      	ldr	r0, [pc, #348]	; (80011dc <LEDScanning+0x20c>)
 8001080:	f000 fee1 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108a:	4854      	ldr	r0, [pc, #336]	; (80011dc <LEDScanning+0x20c>)
 800108c:	f000 fedb 	bl	8001e46 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() % 10);
 8001090:	f7ff ff42 	bl	8000f18 <get7SEG1Value>
 8001094:	4601      	mov	r1, r0
 8001096:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <LEDScanning+0x210>)
 8001098:	fb83 2301 	smull	r2, r3, r3, r1
 800109c:	109a      	asrs	r2, r3, #2
 800109e:	17cb      	asrs	r3, r1, #31
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	1aca      	subs	r2, r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f7ff fda3 	bl	8000bf8 <display7SEG>
			scan_index = 2;
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <LEDScanning+0x208>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	601a      	str	r2, [r3, #0]
			break;
 80010b8:	e08b      	b.n	80011d2 <LEDScanning+0x202>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	4846      	ldr	r0, [pc, #280]	; (80011dc <LEDScanning+0x20c>)
 80010c2:	f000 fec0 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4843      	ldr	r0, [pc, #268]	; (80011dc <LEDScanning+0x20c>)
 80010ce:	f000 feba 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4840      	ldr	r0, [pc, #256]	; (80011dc <LEDScanning+0x20c>)
 80010da:	f000 feb4 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	483d      	ldr	r0, [pc, #244]	; (80011dc <LEDScanning+0x20c>)
 80010e6:	f000 feae 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	483a      	ldr	r0, [pc, #232]	; (80011dc <LEDScanning+0x20c>)
 80010f2:	f000 fea8 	bl	8001e46 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() / 10);
 80010f6:	f7ff ff3d 	bl	8000f74 <get7SEG2Value>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <LEDScanning+0x210>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	1092      	asrs	r2, r2, #2
 8001104:	17db      	asrs	r3, r3, #31
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd75 	bl	8000bf8 <display7SEG>
			scan_index = 3;
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <LEDScanning+0x208>)
 8001110:	2203      	movs	r2, #3
 8001112:	601a      	str	r2, [r3, #0]
			break;
 8001114:	e05d      	b.n	80011d2 <LEDScanning+0x202>
		case 3:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <LEDScanning+0x20c>)
 800111e:	f000 fe92 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	482c      	ldr	r0, [pc, #176]	; (80011dc <LEDScanning+0x20c>)
 800112a:	f000 fe8c 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	4829      	ldr	r0, [pc, #164]	; (80011dc <LEDScanning+0x20c>)
 8001136:	f000 fe86 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <LEDScanning+0x20c>)
 8001142:	f000 fe80 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <LEDScanning+0x20c>)
 800114e:	f000 fe7a 	bl	8001e46 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() % 10);
 8001152:	f7ff ff0f 	bl	8000f74 <get7SEG2Value>
 8001156:	4601      	mov	r1, r0
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <LEDScanning+0x210>)
 800115a:	fb83 2301 	smull	r2, r3, r3, r1
 800115e:	109a      	asrs	r2, r3, #2
 8001160:	17cb      	asrs	r3, r1, #31
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	1aca      	subs	r2, r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fd42 	bl	8000bf8 <display7SEG>
			scan_index = 4;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <LEDScanning+0x208>)
 8001176:	2204      	movs	r2, #4
 8001178:	601a      	str	r2, [r3, #0]
			break;
 800117a:	e02a      	b.n	80011d2 <LEDScanning+0x202>
		case 4:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001182:	4816      	ldr	r0, [pc, #88]	; (80011dc <LEDScanning+0x20c>)
 8001184:	f000 fe5f 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <LEDScanning+0x20c>)
 8001190:	f000 fe59 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <LEDScanning+0x20c>)
 800119c:	f000 fe53 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <LEDScanning+0x20c>)
 80011a8:	f000 fe4d 	bl	8001e46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <LEDScanning+0x20c>)
 80011b4:	f000 fe47 	bl	8001e46 <HAL_GPIO_WritePin>
			display7SEG(mode);
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <LEDScanning+0x214>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd1b 	bl	8000bf8 <display7SEG>
			scan_index = 0;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LEDScanning+0x208>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
			break;
 80011c8:	e003      	b.n	80011d2 <LEDScanning+0x202>
		default:
			scan_index = 0;
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <LEDScanning+0x208>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
			break;
 80011d0:	bf00      	nop
	}
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000064 	.word	0x20000064
 80011dc:	40010800 	.word	0x40010800
 80011e0:	66666667 	.word	0x66666667
 80011e4:	20000000 	.word	0x20000000

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fb2a 	bl	8001844 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 80011f0:	f000 f936 	bl	8001460 <SCH_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f83a 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 f8c0 	bl	800137c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011fc:	f000 f872 	bl	80012e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001200:	4814      	ldr	r0, [pc, #80]	; (8001254 <main+0x6c>)
 8001202:	f001 fa7d 	bl	8002700 <HAL_TIM_Base_Start_IT>
  SCH_Add_Task(toggle_led, 50, 100);
 8001206:	2264      	movs	r2, #100	; 0x64
 8001208:	2132      	movs	r1, #50	; 0x32
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <main+0x70>)
 800120c:	f000 f9e6 	bl	80015dc <SCH_Add_Task>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  	init_buffer();
 8001210:	f7fe ff9c 	bl	800014c <init_buffer>
    	LedTimeDurationInit();
 8001214:	f7ff fca8 	bl	8000b68 <LedTimeDurationInit>
//    	SCH_Add_Task(init_buffer, 1, 1);
//    	SCH_Add_Task(LedTimeDurationInit,1, 1);
    	// Thêm các task vào scheduler
    	//SCH_Add_Task(NormalMode, 1, 100);
    	SCH_Add_Task(fsm_automatic, 1, 100);
 8001218:	2264      	movs	r2, #100	; 0x64
 800121a:	2101      	movs	r1, #1
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <main+0x74>)
 800121e:	f000 f9dd 	bl	80015dc <SCH_Add_Task>
    	SCH_Add_Task(fsm_manual, 2 , 1);
 8001222:	2201      	movs	r2, #1
 8001224:	2102      	movs	r1, #2
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <main+0x78>)
 8001228:	f000 f9d8 	bl	80015dc <SCH_Add_Task>
    	SCH_Add_Task(toggle_led, 50, 1000);
 800122c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001230:	2132      	movs	r1, #50	; 0x32
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <main+0x70>)
 8001234:	f000 f9d2 	bl	80015dc <SCH_Add_Task>
    	SCH_Add_Task(LEDScanning, 0, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <main+0x7c>)
 800123e:	f000 f9cd 	bl	80015dc <SCH_Add_Task>
    	SCH_Add_Task(button_reading, 1, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	2101      	movs	r1, #1
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <main+0x80>)
 8001248:	f000 f9c8 	bl	80015dc <SCH_Add_Task>
  while (1)
  {

	  SCH_Dispatch_Tasks();
 800124c:	f000 f98a 	bl	8001564 <SCH_Dispatch_Tasks>
 8001250:	e7fc      	b.n	800124c <main+0x64>
 8001252:	bf00      	nop
 8001254:	20000080 	.word	0x20000080
 8001258:	080017e5 	.word	0x080017e5
 800125c:	080007c9 	.word	0x080007c9
 8001260:	08000811 	.word	0x08000811
 8001264:	08000fd1 	.word	0x08000fd1
 8001268:	080001e1 	.word	0x080001e1

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	; 0x40
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fdf0 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2310      	movs	r3, #16
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fe00 	bl	8001ea8 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012ae:	f000 f8d1 	bl	8001454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f86c 	bl	80023a8 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f8bd 	bl	8001454 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3740      	adds	r7, #64	; 0x40
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_TIM2_Init+0x94>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_TIM2_Init+0x94>)
 800130a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800130e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM2_Init+0x94>)
 8001318:	2209      	movs	r2, #9
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM2_Init+0x94>)
 800132a:	f001 f999 	bl	8002660 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001334:	f000 f88e 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM2_Init+0x94>)
 8001346:	f001 fb17 	bl	8002978 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 f880 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM2_Init+0x94>)
 8001362:	f001 fcef 	bl	8002d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 f872 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000080 	.word	0x20000080

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <MX_GPIO_Init+0xb8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <MX_GPIO_Init+0xb8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <MX_GPIO_Init+0xb8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_GPIO_Init+0xb8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <MX_GPIO_Init+0xb8>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_GPIO_Init+0xb8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80013c0:	2200      	movs	r2, #0
 80013c2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013c6:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_GPIO_Init+0xbc>)
 80013c8:	f000 fd3d 	bl	8001e46 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <MX_GPIO_Init+0xc0>)
 80013d4:	f000 fd37 	bl	8001e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80013d8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013dc:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_GPIO_Init+0xbc>)
 80013f2:	f000 fb97 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80013f6:	2307      	movs	r3, #7
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_GPIO_Init+0xc0>)
 800140a:	f000 fb8b 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : G1_Pin R2_Pin Y2_Pin G2_Pin
                           R1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 800140e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001412:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_GPIO_Init+0xc0>)
 8001428:	f000 fb7c 	bl	8001b24 <HAL_GPIO_Init>

}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00

08001440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001448:	f000 f83a 	bl	80014c0 <SCH_Update>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <SCH_Init>:

#include "sched.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e01d      	b.n	80014a8 <SCH_Init+0x48>
        SCH_tasks_G[i].pTask = 0;
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <SCH_Init+0x5c>)
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Delay = 0;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <SCH_Init+0x5c>)
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Period = 0;
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <SCH_Init+0x5c>)
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	3308      	adds	r3, #8
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].RunMe = 0;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <SCH_Init+0x5c>)
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	330c      	adds	r3, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	3301      	adds	r3, #1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d9de      	bls.n	800146c <SCH_Init+0xc>
    }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200000c8 	.word	0x200000c8

080014c0 <SCH_Update>:

void SCH_Update(void) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	e040      	b.n	800154e <SCH_Update+0x8e>
        if (SCH_tasks_G[i].pTask) {
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4a24      	ldr	r2, [pc, #144]	; (8001560 <SCH_Update+0xa0>)
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d036      	beq.n	8001548 <SCH_Update+0x88>
            if (SCH_tasks_G[i].Delay == 0) {
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <SCH_Update+0xa0>)
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d122      	bne.n	8001530 <SCH_Update+0x70>
                SCH_tasks_G[i].RunMe++;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	491c      	ldr	r1, [pc, #112]	; (8001560 <SCH_Update+0xa0>)
 80014ee:	011a      	lsls	r2, r3, #4
 80014f0:	440a      	add	r2, r1
 80014f2:	320c      	adds	r2, #12
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	3201      	adds	r2, #1
 80014f8:	b2d1      	uxtb	r1, r2
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <SCH_Update+0xa0>)
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	330c      	adds	r3, #12
 8001502:	460a      	mov	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
                if (SCH_tasks_G[i].Period) {
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <SCH_Update+0xa0>)
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	3308      	adds	r3, #8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d018      	beq.n	8001548 <SCH_Update+0x88>
                    SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4911      	ldr	r1, [pc, #68]	; (8001560 <SCH_Update+0xa0>)
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	440a      	add	r2, r1
 8001520:	3208      	adds	r2, #8
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <SCH_Update+0xa0>)
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	3304      	adds	r3, #4
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e00b      	b.n	8001548 <SCH_Update+0x88>
                }
            } else {
                SCH_tasks_G[i].Delay--;
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	490b      	ldr	r1, [pc, #44]	; (8001560 <SCH_Update+0xa0>)
 8001534:	011a      	lsls	r2, r3, #4
 8001536:	440a      	add	r2, r1
 8001538:	3204      	adds	r2, #4
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	3a01      	subs	r2, #1
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <SCH_Update+0xa0>)
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	3304      	adds	r3, #4
 8001546:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3301      	adds	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d9bb      	bls.n	80014cc <SCH_Update+0xc>
            }
        }
    }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200000c8 	.word	0x200000c8

08001564 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e02a      	b.n	80015c6 <SCH_Dispatch_Tasks+0x62>
        if (SCH_tasks_G[i].RunMe > 0) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <SCH_Dispatch_Tasks+0x74>)
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4413      	add	r3, r2
 8001578:	330c      	adds	r3, #12
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01f      	beq.n	80015c0 <SCH_Dispatch_Tasks+0x5c>
            (*SCH_tasks_G[i].pTask)();
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <SCH_Dispatch_Tasks+0x74>)
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4798      	blx	r3
            SCH_tasks_G[i].RunMe--;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4912      	ldr	r1, [pc, #72]	; (80015d8 <SCH_Dispatch_Tasks+0x74>)
 8001590:	011a      	lsls	r2, r3, #4
 8001592:	440a      	add	r2, r1
 8001594:	320c      	adds	r2, #12
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	3a01      	subs	r2, #1
 800159a:	b2d1      	uxtb	r1, r2
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <SCH_Dispatch_Tasks+0x74>)
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	330c      	adds	r3, #12
 80015a4:	460a      	mov	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period == 0) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <SCH_Dispatch_Tasks+0x74>)
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	3308      	adds	r3, #8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <SCH_Dispatch_Tasks+0x5c>
                SCH_Delete_Task(i);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f850 	bl	8001660 <SCH_Delete_Task>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	3301      	adds	r3, #1
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d9d1      	bls.n	8001570 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000c8 	.word	0x200000c8

080015dc <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
 80015ec:	e02d      	b.n	800164a <SCH_Add_Task+0x6e>
        if (SCH_tasks_G[i].pTask == 0) {
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <SCH_Add_Task+0x80>)
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d123      	bne.n	8001644 <SCH_Add_Task+0x68>
            SCH_tasks_G[i].pTask = pFunction;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <SCH_Add_Task+0x80>)
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].Delay = DELAY;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <SCH_Add_Task+0x80>)
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	3304      	adds	r3, #4
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].Period = PERIOD;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <SCH_Add_Task+0x80>)
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	3308      	adds	r3, #8
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].RunMe = (DELAY == 0) ? 1 : 0;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2da      	uxtb	r2, r3
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	4611      	mov	r1, r2
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <SCH_Add_Task+0x80>)
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	330c      	adds	r3, #12
 800163c:	460a      	mov	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
            return i;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	e006      	b.n	8001652 <SCH_Add_Task+0x76>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	3301      	adds	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b09      	cmp	r3, #9
 800164e:	d9ce      	bls.n	80015ee <SCH_Add_Task+0x12>
        }
    }
    return SCH_MAX_TASKS;
 8001650:	230a      	movs	r3, #10
}
 8001652:	4618      	mov	r0, r3
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200000c8 	.word	0x200000c8

08001660 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID) {
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    if (taskID < SCH_MAX_TASKS && SCH_tasks_G[taskID].pTask) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b09      	cmp	r3, #9
 800166c:	d823      	bhi.n	80016b6 <SCH_Delete_Task+0x56>
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <SCH_Delete_Task+0x64>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <SCH_Delete_Task+0x56>
        SCH_tasks_G[taskID].pTask = 0;
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <SCH_Delete_Task+0x64>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].Delay = 0;
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <SCH_Delete_Task+0x64>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].Period = 0;
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <SCH_Delete_Task+0x64>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	3308      	adds	r3, #8
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].RunMe = 0;
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <SCH_Delete_Task+0x64>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4413      	add	r3, r2
 80016ac:	330c      	adds	r3, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
        return 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <SCH_Delete_Task+0x58>
    }
    return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200000c8 	.word	0x200000c8

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_MspInit+0x5c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x5c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_MspInit+0x60>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_MspInit+0x60>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d113      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 f9ab 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 f9c4 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f889 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f000 ffe5 	bl	8002798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000080 	.word	0x20000080

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <toggle_led>:
 *  Created on: Nov 29, 2024
 *      Author: USER
 */
#include "task.h"

void toggle_led(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <toggle_led+0x10>)
 80017ec:	f000 fb43 	bl	8001e76 <HAL_GPIO_TogglePin>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40010800 	.word	0x40010800

080017f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff ffee 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001814:	4c09      	ldr	r4, [pc, #36]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f001 faf9 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fcdf 	bl	80011e8 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001834:	08002eb4 	.word	0x08002eb4
  ldr r2, =_sbss
 8001838:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800183c:	2000016c 	.word	0x2000016c

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x28>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f923 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff ff32 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f903 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000018 	.word	0x20000018
 80018cc:	20000014 	.word	0x20000014

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_IncTick+0x20>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000018 	.word	0x20000018
 80018f0:	20000168 	.word	0x20000168

080018f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000168 	.word	0x20000168

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e148      	b.n	8001dca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8137 	bne.w	8001dc4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4aa3      	ldr	r2, [pc, #652]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4aa1      	ldr	r2, [pc, #644]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4aa1      	ldr	r2, [pc, #644]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a9f      	ldr	r2, [pc, #636]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a9f      	ldr	r2, [pc, #636]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a9d      	ldr	r2, [pc, #628]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a9d      	ldr	r2, [pc, #628]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a9b      	ldr	r2, [pc, #620]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a9b      	ldr	r2, [pc, #620]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a99      	ldr	r2, [pc, #612]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a82      	ldr	r2, [pc, #520]	; (8001dfc <HAL_GPIO_Init+0x2d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8090 	beq.w	8001dc4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a49      	ldr	r2, [pc, #292]	; (8001e08 <HAL_GPIO_Init+0x2e4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <HAL_GPIO_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_GPIO_Init+0x1d8>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001d04:	2300      	movs	r3, #0
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d16:	493b      	ldr	r1, [pc, #236]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4937      	ldr	r1, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4933      	ldr	r1, [pc, #204]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	492d      	ldr	r1, [pc, #180]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4929      	ldr	r1, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4923      	ldr	r1, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	491f      	ldr	r1, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4919      	ldr	r1, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4915      	ldr	r1, [pc, #84]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f aeaf 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	372c      	adds	r7, #44	; 0x2c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	10320000 	.word	0x10320000
 8001dec:	10310000 	.word	0x10310000
 8001df0:	10220000 	.word	0x10220000
 8001df4:	10210000 	.word	0x10210000
 8001df8:	10120000 	.word	0x10120000
 8001dfc:	10110000 	.word	0x10110000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e56:	787b      	ldrb	r3, [r7, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	611a      	str	r2, [r3, #16]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e26c      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00c      	beq.n	8001eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d112      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
 8001ee0:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d06c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d168      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e246      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x76>
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a7f      	ldr	r2, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e02e      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7a      	ldr	r2, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b78      	ldr	r3, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a77      	ldr	r2, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xbc>
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a71      	ldr	r2, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f64:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fcb6 	bl	80018f4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fcb2 	bl	80018f4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1fa      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe4>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fca2 	bl	80018f4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fc9e 	bl	80018f4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1e6      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x10c>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1ba      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4939      	ldr	r1, [pc, #228]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fc57 	bl	80018f4 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff fc53 	bl	80018f4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e19b      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fc36 	bl	80018f4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7ff fc32 	bl	80018f4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e17a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03a      	beq.n	800212c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc16 	bl	80018f4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc12 	bl	80018f4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e15a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f000 fa9a 	bl	8002624 <RCC_Delay>
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fbfc 	bl	80018f4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fbf8 	bl	80018f4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d908      	bls.n	8002120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e140      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	42420000 	.word	0x42420000
 800211c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b9e      	ldr	r3, [pc, #632]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e9      	bne.n	8002100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a6 	beq.w	8002286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b97      	ldr	r3, [pc, #604]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10d      	bne.n	8002166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b94      	ldr	r3, [pc, #592]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a93      	ldr	r2, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b91      	ldr	r3, [pc, #580]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff fbb9 	bl	80018f4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff fbb5 	bl	80018f4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0fd      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021ac:	4b7b      	ldr	r3, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a7a      	ldr	r2, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e02d      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4b73      	ldr	r3, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a72      	ldr	r2, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	e01c      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0x356>
 80021e4:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a6c      	ldr	r2, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fb69 	bl	80018f4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff fb65 	bl	80018f4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0ab      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ee      	beq.n	8002226 <HAL_RCC_OscConfig+0x37e>
 8002248:	e014      	b.n	8002274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fb53 	bl	80018f4 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff fb4f 	bl	80018f4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e095      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b48      	ldr	r3, [pc, #288]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d061      	beq.n	8002360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d146      	bne.n	8002332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff fb23 	bl	80018f4 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff fb1f 	bl	80018f4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e067      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	492d      	ldr	r1, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a19      	ldr	r1, [r3, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	430b      	orrs	r3, r1
 80022fe:	4927      	ldr	r1, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff faf3 	bl	80018f4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff faef 	bl	80018f4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e037      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
 8002330:	e02f      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fadc 	bl	80018f4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff fad8 	bl	80018f4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e020      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x498>
 800235e:	e018      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e013      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4965      	ldr	r1, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7ff fa2c 	bl	80018f4 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff fa28 	bl	80018f4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d210      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1cc>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f98a 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	08002e88 	.word	0x08002e88
 8002574:	20000010 	.word	0x20000010
 8002578:	20000014 	.word	0x20000014

0800257c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x30>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x36>
 80025aa:	e027      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	e027      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	fb02 f203 	mul.w	r2, r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e004      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	613b      	str	r3, [r7, #16]
      break;
 80025fa:	e002      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002602:	693b      	ldr	r3, [r7, #16]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	08002e98 	.word	0x08002e98
 800261c:	08002ea8 	.word	0x08002ea8
 8002620:	003d0900 	.word	0x003d0900

08002624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCC_Delay+0x34>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <RCC_Delay+0x38>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a5b      	lsrs	r3, r3, #9
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002640:	bf00      	nop
  }
  while (Delay --);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f9      	bne.n	8002640 <RCC_Delay+0x1c>
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000010 	.word	0x20000010
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e041      	b.n	80026f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff f850 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f000 fa56 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d001      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e035      	b.n	8002784 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_TIM_Base_Start_IT+0x90>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x4e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002742:	d004      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x4e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <HAL_TIM_Base_Start_IT+0x94>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d010      	beq.n	8002782 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	e007      	b.n	8002782 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400

08002798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d020      	beq.n	80027fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0202 	mvn.w	r2, #2
 80027cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f998 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f98b 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f99a 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0204 	mvn.w	r2, #4
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f972 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f965 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f974 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0208 	mvn.w	r2, #8
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f94c 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f93f 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f94e 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0210 	mvn.w	r2, #16
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2208      	movs	r2, #8
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f926 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f919 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f928 	bl	8002b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0201 	mvn.w	r2, #1
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fd9e 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00c      	beq.n	8002928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa6f 	bl	8002e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00c      	beq.n	800294c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8f8 	bl	8002b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0220 	mvn.w	r2, #32
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa42 	bl	8002df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIM_ConfigClockSource+0x1c>
 8002990:	2302      	movs	r3, #2
 8002992:	e0b4      	b.n	8002afe <HAL_TIM_ConfigClockSource+0x186>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029cc:	d03e      	beq.n	8002a4c <HAL_TIM_ConfigClockSource+0xd4>
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d2:	f200 8087 	bhi.w	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	f000 8086 	beq.w	8002aea <HAL_TIM_ConfigClockSource+0x172>
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	d87f      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d01a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0xa6>
 80029e8:	2b70      	cmp	r3, #112	; 0x70
 80029ea:	d87b      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d050      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x11a>
 80029f0:	2b60      	cmp	r3, #96	; 0x60
 80029f2:	d877      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d03c      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0xfa>
 80029f8:	2b50      	cmp	r3, #80	; 0x50
 80029fa:	d873      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d058      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d86f      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d064      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a08:	2b30      	cmp	r3, #48	; 0x30
 8002a0a:	d86b      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d060      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d867      	bhi.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05c      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d05a      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a1c:	e062      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f000 f96a 	bl	8002d06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	609a      	str	r2, [r3, #8]
      break;
 8002a4a:	e04f      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f000 f953 	bl	8002d06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6e:	609a      	str	r2, [r3, #8]
      break;
 8002a70:	e03c      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 f8ca 	bl	8002c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2150      	movs	r1, #80	; 0x50
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f921 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e02c      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 f8e8 	bl	8002c74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2160      	movs	r1, #96	; 0x60
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f911 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e01c      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 f8aa 	bl	8002c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f901 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e00c      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f000 f8f8 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002ae2:	e003      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e000      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
	...

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2b      	ldr	r2, [pc, #172]	; (8002c10 <TIM_Base_SetConfig+0xc0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <TIM_Base_SetConfig+0x28>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d003      	beq.n	8002b78 <TIM_Base_SetConfig+0x28>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <TIM_Base_SetConfig+0xc4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d108      	bne.n	8002b8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <TIM_Base_SetConfig+0xc0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x52>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x52>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_Base_SetConfig+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <TIM_Base_SetConfig+0xc0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d103      	bne.n	8002be8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f023 0201 	bic.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]
  }
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400

08002c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 030a 	bic.w	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0210 	bic.w	r2, r3, #16
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e041      	b.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d004      	beq.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10c      	bne.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400

08002df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	4d0c      	ldr	r5, [pc, #48]	; (8002e50 <__libc_init_array+0x38>)
 8002e1e:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e20:	1b64      	subs	r4, r4, r5
 8002e22:	10a4      	asrs	r4, r4, #2
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	f000 f822 	bl	8002e70 <_init>
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	4d0a      	ldr	r5, [pc, #40]	; (8002e58 <__libc_init_array+0x40>)
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <__libc_init_array+0x44>)
 8002e32:	1b64      	subs	r4, r4, r5
 8002e34:	10a4      	asrs	r4, r4, #2
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002eac 	.word	0x08002eac
 8002e54:	08002eac 	.word	0x08002eac
 8002e58:	08002eac 	.word	0x08002eac
 8002e5c:	08002eb0 	.word	0x08002eb0

08002e60 <memset>:
 8002e60:	4603      	mov	r3, r0
 8002e62:	4402      	add	r2, r0
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d100      	bne.n	8002e6a <memset+0xa>
 8002e68:	4770      	bx	lr
 8002e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6e:	e7f9      	b.n	8002e64 <memset+0x4>

08002e70 <_init>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr

08002e7c <_fini>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	bf00      	nop
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr
